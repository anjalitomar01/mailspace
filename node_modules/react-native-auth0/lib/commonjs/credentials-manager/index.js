"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _credentialsManagerError = _interopRequireDefault(require("./credentialsManagerError"));
var _nativeHelper = require("../utils/nativeHelper");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class CredentialsManager {
  /**
   * @ignore
   */
  constructor(domain, clientId, localAuthenticationOptions) {
    this.domain = domain;
    this.clientId = clientId;
    this.localAuthenticationOptions = localAuthenticationOptions;
    this.Auth0Module = _reactNative.NativeModules.A0Auth0;
  }

  /**
   * Saves the provided credentials
   */
  async saveCredentials(credentials) {
    const validateKeys = ['idToken', 'accessToken', 'tokenType', 'expiresAt'];
    validateKeys.forEach(key => {
      if (!credentials[key]) {
        const json = {
          error: 'a0.credential_manager.invalid_input',
          error_description: `${key} cannot be empty`,
          invalid_parameter: key
        };
        throw new _credentialsManagerError.default({
          json,
          status: 0
        });
      }
    });
    try {
      await (0, _nativeHelper._ensureNativeModuleIsInitializedWithConfiguration)(this.Auth0Module, this.clientId, this.domain, this.localAuthenticationOptions);
      return await this.Auth0Module.saveCredentials(credentials);
    } catch (e) {
      const json = {
        error: 'a0.credential_manager.invalid',
        error_description: e.message,
        code: e.code
      };
      throw new _credentialsManagerError.default({
        json,
        status: 0
      });
    }
  }

  /**
   * Gets the credentials that has already been saved
   *
   * @param scope The scope to request for the access token. If null is passed, the previous scope will be kept.
   * @param minTtl The minimum time in seconds that the access token should last before expiration.
   * @param parameters Additional parameters to send in the request to refresh expired credentials.
   * @param forceRefresh Whether to force refresh the credentials. It will work only if the refresh token already exists. For iOS, doing forceRefresh will not send the scope. Since scope change already does force refresh, it is better to avoid force refresh if the scope is being changed.
   * @returns A populated instance of {@link Credentials}.
   */
  async getCredentials(scope, minTtl = 0, parameters = {}, forceRefresh = false) {
    try {
      await (0, _nativeHelper._ensureNativeModuleIsInitializedWithConfiguration)(this.Auth0Module, this.clientId, this.domain, this.localAuthenticationOptions);
      return new Promise((resolve, reject) => {
        this.Auth0Module.getCredentials(scope, minTtl, parameters, forceRefresh).then(resolve).catch(e => {
          const json = {
            error: 'a0.credential_manager.invalid',
            error_description: e.message,
            code: e.code
          };
          reject(new _credentialsManagerError.default({
            json,
            status: 0
          }));
        });
      });
    } catch (e) {
      const json = {
        error: 'a0.credential_manager.invalid',
        error_description: e.message
      };
      throw new _credentialsManagerError.default({
        json,
        status: 0
      });
    }
  }

  /**
   * Returns whether this manager contains a valid non-expired pair of credentials.
   *
   * @param minTtl The minimum time in seconds that the access token should last before expiration
   * @returns `true` if a valid set of credentials are available, or `false` if there are no credentials to return.
   */
  async hasValidCredentials(minTtl = 0) {
    await (0, _nativeHelper._ensureNativeModuleIsInitializedWithConfiguration)(this.Auth0Module, this.clientId, this.domain, this.localAuthenticationOptions);
    return await this.Auth0Module.hasValidCredentials(minTtl);
  }

  /**
   * Delete the stored credentials
   */
  async clearCredentials() {
    await (0, _nativeHelper._ensureNativeModuleIsInitializedWithConfiguration)(this.Auth0Module, this.clientId, this.domain, this.localAuthenticationOptions);
    return this.Auth0Module.clearCredentials();
  }
}
var _default = exports.default = CredentialsManager;
//# sourceMappingURL=index.js.map