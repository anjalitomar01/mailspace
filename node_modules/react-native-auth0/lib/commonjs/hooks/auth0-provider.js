"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _jwtDecode = _interopRequireDefault(require("jwt-decode"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _auth0Context = _interopRequireDefault(require("./auth0-context"));
var _auth = _interopRequireDefault(require("../auth0"));
var _reducer = _interopRequireDefault(require("./reducer"));
var _userConversion = require("../utils/userConversion");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const initialState = {
  user: null,
  error: null,
  isLoading: true
};

/**
 * @ignore
 */
const getIdTokenProfileClaims = idToken => {
  const payload = (0, _jwtDecode.default)(idToken);
  return (0, _userConversion.convertUser)(payload);
};

/**
 * @ignore
 */
const finalizeScopeParam = inputScopes => {
  const specifiedScopes = inputScopes?.split(' ').map(s => s.trim()) || [];
  const scopeSet = new Set([...specifiedScopes, ...['openid', 'profile', 'email']]);
  return Array.from(scopeSet).join(' ');
};

/**
 * Provides the Auth0Context to its child components.
 * @param {String} domain Your Auth0 domain
 * @param {String} clientId Your Auth0 client ID
 * @param {LocalAuthenticationOptions} localAuthenticationOptions The local auth options
 *
 * @example
 * ```ts
 * <Auth0Provider domain="YOUR AUTH0 DOMAIN" clientId="YOUR CLIENT ID">
 *   <App />
 * </Auth0Provider>
 * ```
 */
const Auth0Provider = ({
  domain,
  clientId,
  localAuthenticationOptions,
  children
}) => {
  const client = (0, _react.useMemo)(() => new _auth.default({
    domain,
    clientId,
    localAuthenticationOptions
  }), [domain, clientId, localAuthenticationOptions]);
  const [state, dispatch] = (0, _react.useReducer)(_reducer.default, initialState);
  (0, _react.useEffect)(() => {
    (async () => {
      let user = null;
      if (await client.credentialsManager.hasValidCredentials()) {
        try {
          const credentials = await client.credentialsManager.getCredentials();
          if (credentials) {
            user = getIdTokenProfileClaims(credentials.idToken);
          }
        } catch (error) {
          dispatch({
            type: 'ERROR',
            error
          });
        }
      }
      dispatch({
        type: 'INITIALIZED',
        user
      });
    })();
  }, [client]);
  const authorize = (0, _react.useCallback)(async (parameters = {}, options = {}) => {
    try {
      parameters.scope = finalizeScopeParam(parameters.scope);
      const credentials = await client.webAuth.authorize(parameters, options);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const cancelWebAuth = (0, _react.useCallback)(async () => {
    try {
      await client.webAuth.cancelWebAuth();
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const clearSession = (0, _react.useCallback)(async (parameters = {}, options = {}) => {
    try {
      await client.webAuth.clearSession(parameters, options);
      await client.credentialsManager.clearCredentials();
      dispatch({
        type: 'LOGOUT_COMPLETE'
      });
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const getCredentials = (0, _react.useCallback)(async (scope, minTtl = 0, parameters = {}, forceRefresh = false) => {
    try {
      const credentials = await client.credentialsManager.getCredentials(scope, minTtl, parameters, forceRefresh);
      if (credentials.idToken) {
        const user = getIdTokenProfileClaims(credentials.idToken);
        dispatch({
          type: 'SET_USER',
          user
        });
      }
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const sendSMSCode = (0, _react.useCallback)(async parameters => {
    try {
      await client.auth.passwordlessWithSMS(parameters);
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithSMS = (0, _react.useCallback)(async parameters => {
    try {
      let scope = finalizeScopeParam(parameters?.scope);
      if (scope) {
        parameters = {
          ...parameters,
          scope
        };
      }
      const credentials = await client.auth.loginWithSMS(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const sendEmailCode = (0, _react.useCallback)(async parameters => {
    try {
      await client.auth.passwordlessWithEmail(parameters);
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithEmail = (0, _react.useCallback)(async parameters => {
    try {
      let scope = finalizeScopeParam(parameters?.scope);
      if (scope) {
        parameters = {
          ...parameters,
          scope
        };
      }
      const credentials = await client.auth.loginWithEmail(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const sendMultifactorChallenge = (0, _react.useCallback)(async parameters => {
    try {
      await client.auth.multifactorChallenge(parameters);
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithOOB = (0, _react.useCallback)(async parameters => {
    try {
      const credentials = await client.auth.loginWithOOB(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithOTP = (0, _react.useCallback)(async parameters => {
    try {
      const credentials = await client.auth.loginWithOTP(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithRecoveryCode = (0, _react.useCallback)(async parameters => {
    try {
      const credentials = await client.auth.loginWithRecoveryCode(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithPasswordRealm = (0, _react.useCallback)(async parameters => {
    try {
      const credentials = await client.auth.passwordRealm(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithExchangeNativeSocial = (0, _react.useCallback)(async parameters => {
    try {
      const credentials = await client.auth.exchangeNativeSocial(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const revokeRefreshToken = (0, _react.useCallback)(async parameters => {
    try {
      await client.auth.revoke(parameters);
      return;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const resetPassword = (0, _react.useCallback)(async parameters => {
    try {
      await client.auth.resetPassword(parameters);
      return;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const hasValidCredentials = (0, _react.useCallback)(async (minTtl = 0) => {
    return await client.credentialsManager.hasValidCredentials(minTtl);
  }, [client]);
  const clearCredentials = (0, _react.useCallback)(async () => {
    try {
      await client.credentialsManager.clearCredentials();
      dispatch({
        type: 'LOGOUT_COMPLETE'
      });
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const contextValue = (0, _react.useMemo)(() => ({
    ...state,
    authorize,
    cancelWebAuth,
    sendSMSCode,
    authorizeWithSMS,
    sendEmailCode,
    authorizeWithEmail,
    sendMultifactorChallenge,
    authorizeWithOOB,
    authorizeWithOTP,
    authorizeWithRecoveryCode,
    hasValidCredentials,
    clearSession,
    getCredentials,
    clearCredentials,
    authorizeWithPasswordRealm,
    authorizeWithExchangeNativeSocial,
    revokeRefreshToken,
    resetPassword
  }), [state, authorize, cancelWebAuth, sendSMSCode, authorizeWithSMS, sendEmailCode, authorizeWithEmail, sendMultifactorChallenge, authorizeWithOOB, authorizeWithOTP, authorizeWithRecoveryCode, hasValidCredentials, clearSession, getCredentials, clearCredentials, authorizeWithPasswordRealm, authorizeWithExchangeNativeSocial, revokeRefreshToken, resetPassword]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_auth0Context.default.Provider, {
    value: contextValue,
    children: children
  });
};
Auth0Provider.propTypes = {
  domain: _propTypes.default.string.isRequired,
  clientId: _propTypes.default.string.isRequired,
  children: _propTypes.default.element.isRequired
};
var _default = exports.default = Auth0Provider;
//# sourceMappingURL=auth0-provider.js.map