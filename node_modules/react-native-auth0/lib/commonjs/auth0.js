"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _auth = _interopRequireDefault(require("./auth"));
var _credentialsManager = _interopRequireDefault(require("./credentials-manager"));
var _users = _interopRequireDefault(require("./management/users"));
var _webauth = _interopRequireDefault(require("./webauth"));
var _addDefaultLocalAuthOptions = _interopRequireDefault(require("./utils/addDefaultLocalAuthOptions"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Auth0 for React Native client
 */
class Auth0 {
  /**
   * Creates an instance of Auth0.
   * @param {Object} options Your Auth0 application information
   * @param {String} options.domain Your Auth0 domain
   * @param {String} options.clientId Your Auth0 application client identifier
   * @param {String} options.telemetry The telemetry information to be sent along with the requests
   * @param {String} options.token Token to be used for Management APIs
   * @param {String} options.timeout Timeout to be set for requests.
   * @param {LocalAuthenticationOptions} options.localAuthenticationOptions The options for configuring the display of local authentication prompt, authentication level (Android only) and evaluation policy (iOS only).
   */
  constructor(options) {
    const {
      domain,
      clientId,
      ...extras
    } = options;
    const localAuthenticationOptions = options.localAuthenticationOptions ? (0, _addDefaultLocalAuthOptions.default)(options.localAuthenticationOptions) : undefined;
    this.auth = new _auth.default({
      baseUrl: domain,
      clientId,
      ...extras
    });
    this.webAuth = new _webauth.default(this.auth, localAuthenticationOptions);
    this.credentialsManager = new _credentialsManager.default(domain, clientId, localAuthenticationOptions);
    this.options = options;
  }

  /**
   * Creates a Users API client
   * @param  {String} token for Management API
   * @return {Users}
   */
  users(token) {
    const {
      domain,
      ...extras
    } = this.options;
    return new _users.default({
      baseUrl: domain,
      ...extras,
      token
    });
  }
}
var _default = exports.default = Auth0;
//# sourceMappingURL=auth0.js.map