import { ClearSessionOptions, ClearSessionParameters, Credentials, WebAuthorizeOptions, WebAuthorizeParameters } from '../types';
import Auth from '../auth';
import LocalAuthenticationOptions from 'src/credentials-manager/localAuthenticationOptions';
/**
 * Helper to perform Auth against Auth0 hosted login page
 *
 * It will use `/authorize` endpoint of the Authorization Server (AS)
 * with Code Grant and Proof Key for Challenge Exchange (PKCE).
 *
 * @see https://auth0.com/docs/api-auth/grant/authorization-code-pkce
 */
declare class WebAuth {
    private domain;
    private clientId;
    private agent;
    private localAuthenticationOptions?;
    /**
     * @ignore
     */
    constructor(auth: Auth, localAuthenticationOptions?: LocalAuthenticationOptions);
    /**
     * Starts the AuthN/AuthZ transaction against the AS in the in-app browser.
     *
     * To learn more about how to customize the authorize call, check the Universal Login Page
     * article at https://auth0.com/docs/hosted-pages/login
     *
     * @see https://auth0.com/docs/api/authentication#authorize-client
     * @returns A poplulated instance of {@link Credentials}.
     */
    authorize(parameters?: WebAuthorizeParameters, options?: WebAuthorizeOptions): Promise<Credentials>;
    /**
     * Terminates the ongoing web-based operation and reports back that it was cancelled.
     * You need to call this method within your custom Web Auth provider implementation whenever the operation is
     * cancelled by the user.
     */
    cancelWebAuth(): Promise<void>;
    /**
     *  Removes Auth0 session and optionally remove the Identity Provider session.
     *
     * @see https://auth0.com/docs/logout
     */
    clearSession(parameters?: ClearSessionParameters, options?: ClearSessionOptions): Promise<void>;
}
export default WebAuth;
//# sourceMappingURL=index.d.ts.map