import { Credentials } from '../types';
import LocalAuthenticationOptions from './localAuthenticationOptions';
declare class CredentialsManager {
    private domain;
    private clientId;
    private Auth0Module;
    private localAuthenticationOptions?;
    /**
     * @ignore
     */
    constructor(domain: string, clientId: string, localAuthenticationOptions?: LocalAuthenticationOptions);
    /**
     * Saves the provided credentials
     */
    saveCredentials(credentials: Credentials): Promise<void>;
    /**
     * Gets the credentials that has already been saved
     *
     * @param scope The scope to request for the access token. If null is passed, the previous scope will be kept.
     * @param minTtl The minimum time in seconds that the access token should last before expiration.
     * @param parameters Additional parameters to send in the request to refresh expired credentials.
     * @param forceRefresh Whether to force refresh the credentials. It will work only if the refresh token already exists. For iOS, doing forceRefresh will not send the scope. Since scope change already does force refresh, it is better to avoid force refresh if the scope is being changed.
     * @returns A populated instance of {@link Credentials}.
     */
    getCredentials(scope?: string, minTtl?: number, parameters?: Record<string, unknown>, forceRefresh?: boolean): Promise<Credentials>;
    /**
     * Returns whether this manager contains a valid non-expired pair of credentials.
     *
     * @param minTtl The minimum time in seconds that the access token should last before expiration
     * @returns `true` if a valid set of credentials are available, or `false` if there are no credentials to return.
     */
    hasValidCredentials(minTtl?: number): Promise<boolean>;
    /**
     * Delete the stored credentials
     */
    clearCredentials(): Promise<void>;
}
export default CredentialsManager;
//# sourceMappingURL=index.d.ts.map